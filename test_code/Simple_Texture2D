#include <stdlib.h>
#include "esUtil.h"

#define VERTEX_POS_INDEX 0
#define TEXTURE_COOR_INDEX 1 

typedef struct
{
    GLuint programObject;
    GLint samplerLoc;
    GLuint textureId;
} UserData;

GLuint CreateSimpleTexture2D()
{
    GLuint textureId;
    GLubyte pixels[4 * 3] = {
        255, 0, 0,
        0, 255, 0,
        0, 0, 255,
        255, 255, 0
    };

    glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
    glGenTextures(1, &textureId);
    glBindTexture(GL_TEXTURE_2D, textureId);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, 2, 2, 0, GL_RGB, GL_UNSIGNED_BYTE, pixels);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

    return textureId;
}

int Init(ESContext *esContext)
{
    UserData *userData = esContext->userData;
    char vShaderStr[] =
        "#version 300 es                            \n"
        "layout(location = 0) in vec4 a_position;   \n"
        "layout(location = 1) in vec2 a_texCoord;   \n"
        "out vec2 v_texCoord;                       \n"
        "void main()                                \n"
        "{                                          \n"
        "   gl_Position = a_position;               \n"
        "   v_texCoord = a_texCoord;                \n"
        "}";
    char fShaderStr[] =
        "#version 300 es                                \n"
        "precision mediump float;                       \n"
        "in vec2 v_texCoord;                            \n"
        "layout(location = 0) out vec4 outColor;        \n"
        "uniform sampler2D s_texture;                   \n"
        "void main()                                    \n"
        "{                                              \n"
        "   outColor = texture(s_texture, v_texCoord);  \n"
        "}";

    userData->programObject = esLoadProgram(vShaderStr, fShaderStr);

    userData->samplerLoc = glGetUniformLocation(userData->programObject, "s_texture");
    userData->textureId = CreateSimpleTexture2D();

    glClearColor(1.0f, 1.0f, 1.0f, 0.0f);

    return GL_TRUE;
}

void Shutdown(ESContext *esContext)
{
    UserData *userData = esContext->userData;

    glDeleteTextures(1, &userData->textureId);
    glDeleteProgram(userData->programObject);
}

void Draw(ESContext *esContext)
{
    UserData *userData = esContext->userData;
    GLfloat vVertices[] = {
        -0.5f, 0.5f, 0.0f,
        0.0f, 0.0f,
        -0.5f, -0.5f, 0.0f,
        0.0f, 1.0f,
        0.5f, -0.5f, 0.0f,
        1.0f, 1.0f,
        0.5f, 0.5f, 0.0f,
        1.0f, 0.0f
    };
    GLushort indices[] = {0, 1, 2, 0, 2, 3};

    glViewport(0, 0, esContext->width, esContext->height);
    glClear(GL_COLOR_BUFFER_BIT);
    glUseProgram(userData->programObject);

    glVertexAttribPointer(VERTEX_POS_INDEX, 3, GL_FLOAT, GL_FALSE, sizeof(GLfloat) * 5, vVertices);
    glVertexAttribPointer(TEXTURE_COOR_INDEX, 2, GL_FLOAT, GL_FALSE, sizeof(GLfloat) * 5, vVertices + 3);
    glEnableVertexAttribArray(VERTEX_POS_INDEX);
    glEnableVertexAttribArray(TEXTURE_COOR_INDEX);

    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, userData->textureId);

    glUniform1i(userData->samplerLoc, 0);

    glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_SHORT, indices);
}

int esMain(ESContext *esContext)
{
    esContext->userData = malloc(sizeof(UserData));

    esCreateWindow(esContext, "Simple Texture 2D", 320, 240, ES_WINDOW_RGB);

    if (!Init(esContext))
        return GL_FALSE;

    esRegisterDrawFunc(esContext, Draw);
    esRegisterShutdownFunc(esContext, Shutdown);

    return GL_TRUE;
}